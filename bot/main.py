import os
import asyncio
from aiogram import Bot, Router, types, F
from aiogram.types import InputFile, ChatMemberUpdated
from aiogram.enums import ChatType
from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command, CommandObject
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder
import logging
import time
import aiohttp
import re
import aiogram
from collections import defaultdict
from datetime import datetime, timedelta, date
import uvicorn
import json
import random
import requests
from vosk import Model, KaldiRecognizer
import wave
from pydub import AudioSegment
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
storage = MemoryStorage()
token = os.getenv("TELEGRAM_BOT_TOKEN")
bot = Bot(token)

model = Model("models/vosk-model-small-ru-0.22")

router = Router()
API_URL = os.getenv("API_URL")

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≥—Ä—É–ø–ø
joinedFile = open("joined.txt", "r")
joinedUsers = set()
for line in joinedFile:
    joinedUsers.add(line.strip())
joinedFile.close()

groupFile = open("group.txt", "r")
joinedGroups = set()
for line in groupFile:
    joinedGroups.add(line.strip())
groupFile.close()

async def send_broadcast(message: str):
    with open('joined.txt', 'r') as file:
        user_ids = file.readlines()

    for user_id in user_ids:
        try:
            await bot.send_message(chat_id=int(user_id.strip()), text=message)
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id.strip()}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id.strip()}: {e}")

async def generate_with_ai(user_id: int, message: str) -> str:
    async with aiohttp.ClientSession() as session:
        payload = {
            "user_id": user_id,
            "message": message
        }
        try:
            async with session.post(f"{API_URL}generate-response", json=payload) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    return data['response']
                logging.error(f"API error: {await resp.text()}")
                return None
        except Exception as e:
            logging.error(f"Connection error: {e}")
            return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é Vosk
def transcribe_audio(wav_filename: str) -> str:
    wf = wave.open(wav_filename, "rb")
    if wf.getnchannels() != 1 or wf.getsampwidth() != 2 or wf.getframerate() not in [8000, 16000]:
        raise ValueError("–ê—É–¥–∏–æ—Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–æ–Ω–æ, 16 –±–∏—Ç, 8 –∏–ª–∏ 16 –∫–ì—Ü")

    rec = KaldiRecognizer(model, wf.getframerate())
    result = ""
    while True:
        data = wf.readframes(4000)
        if len(data) == 0:
            break
        if rec.AcceptWaveform(data):
            res = json.loads(rec.Result())
            result += res.get("text", "") + " "
    res = json.loads(rec.FinalResult())
    result += res.get("text", "")
    return result.strip()

@router.message(Command("start"))
async def start(message: types.Message):
    global username
    global userlastname
    global user_id
    global chat_id
    username = message.from_user.first_name
    userlastname = message.from_user.full_name
    nickname = message.from_user.username
    user_id = message.from_user.id
    chat_id = message.chat.id

    # –ï—Å–ª–∏ —ç—Ç–æ –ª–∏—á–Ω—ã–π —á–∞—Ç, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º user_id
    if message.chat.type == ChatType.PRIVATE:
        if not str(message.chat.id) in joinedUsers:
            joinedFile = open("joined.txt", "a")
            joinedFile.write(str(message.chat.id) + "\n")
            joinedUsers.add(message.chat.id)
            # URL —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
            url = "http://127.0.0.1:9999/join"

            # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (JSON-—Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞)
            data = {
                "user_id": user_id  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π user_id (chat_id)
            }

            # –û—Ç–ø—Ä–∞–≤–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞
            response = requests.post(url, json=data)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
            if response.status_code == 200:
                print("–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                print("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response.json())
            else:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", response.status_code)
                print("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response.text)
    # –ï—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–∞, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º group_id
    elif message.chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]:
        if not str(message.chat.id) in joinedGroups:
            groupFile = open("group.txt", "a")
            groupFile.write(str(message.chat.id) + "\n")
            joinedGroups.add(message.chat.id)

    await message.answer(f"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ú–µ—Ö–º–∞—Ç –Æ–§–£.\n–¢—ã –º–æ–∂–µ—à—å –º–Ω–µ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å üòä")
    print("first name:", username)
    print("last name:", userlastname)
    print("nickname:", nickname)
    print("user id:", user_id)
    print("–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
@router.chat_member()
async def on_chat_member_update(chat_member: ChatMemberUpdated):
    if chat_member.new_chat_member.status == "member":
        if not str(chat_member.chat.id) in joinedGroups:
            groupFile = open("group.txt", "a")
            groupFile.write(str(chat_member.chat.id) + "\n")
            joinedGroups.add(chat_member.chat.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message(F.text)
async def handle_message(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º username –±–æ—Ç–∞
    bot_username = (await bot.get_me()).username

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –±–æ—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if message.chat.type != "private" and f"@{bot_username}" in message.text:
        # –£–±–∏—Ä–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        question = message.text.replace(f"@{bot_username}", "").strip()

        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Å—Ç–∞–ª—Å—è —Ç–µ–∫—Å—Ç, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ –∫–∞–∫ –≤–æ–ø—Ä–æ—Å
        if question:
            user_id = int(message.from_user.id)
            response = await generate_with_ai(user_id, question)
            
            if response:
                await message.reply(response)  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º
            else:
                await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.")
        else:
            await message.reply("–í—ã —É–ø–æ–º—è–Ω—É–ª–∏ –º–µ–Ω—è, –Ω–æ –Ω–µ –∑–∞–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å. üòä")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö
    elif message.chat.type == "private":
        user_id = int(message.from_user.id)
        message_text = str(message.text)
        
        response = await generate_with_ai(user_id, message_text)
        
        if response:
            await message.answer(response)
        else:
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.")

@router.message(F.voice)
async def handle_voice(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –Ω–µ –∏–∑ –≥—Ä—É–ø–ø—ã –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã
    if message.chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–∞—Ö

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    file_info = await bot.get_file(message.voice.file_id)
    file_path = file_info.file_path
    fname = os.path.basename(file_path).split('.')[0]  # –ò–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    doc = requests.get(f'https://api.telegram.org/file/bot{token}/{file_path}')
    with open(f'{fname}.oga', 'wb') as f:
        f.write(doc.content)

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ogg –≤ wav —Å –ø–æ–º–æ—â—å—é pydub
    audio = AudioSegment.from_ogg(f"{fname}.oga")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—É–¥–∏–æ: –º–æ–Ω–æ, 16 –±–∏—Ç, 16 –∫–ì—Ü
    audio = audio.set_channels(1)  # –ú–æ–Ω–æ
    audio = audio.set_sample_width(2)  # 16 –±–∏—Ç
    audio = audio.set_frame_rate(16000)  # 16 –∫–ì—Ü

    wav_filename = f"{fname}.wav"
    audio.export(wav_filename, format="wav")

    # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é Vosk
    text = transcribe_audio(wav_filename)

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    os.remove(f"{fname}.oga")
    os.remove(wav_filename)

    if text:
        user_id = int(message.from_user.id)
        message_text = str(text)
        
        response = await generate_with_ai(user_id, message_text)
        
        if response:
            await message.answer(response)
        else:
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

async def main():
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    dp = Dispatcher(storage=MemoryStorage())
    dp.include_routers(router)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())

if __name__ == "__main__":
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    asyncio.run(main())